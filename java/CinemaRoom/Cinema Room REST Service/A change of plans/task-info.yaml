type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion "
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/CinemaService.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.ArrayList;
    import java.util.List;

    public class CinemaService {

        // initialize
        public CinemaModel initializeSeats(){
            CinemaModel cinemaModel = new CinemaModel();

            cinemaModel.setTotalRows(9);
            cinemaModel.setTotalColumns(9);

            for (int i = 1; i < 10; i++) {
                for (int j = 1; j < 10; j++) {
                    cinemaModel.setAvailableSeats(new AvailableModel(i,j));
                }
            }
            return  cinemaModel;
        }

        public CinemaModel getSeats(CinemaModel cinemaModel){

            List<AvailableModel> newAvailableModel = new ArrayList<>();

            for (AvailableModel availableModel : cinemaModel.getAvailableSeats()){
                if (!availableModel.getReserved()){
                    newAvailableModel.add(new AvailableModel(availableModel.getRow(), availableModel.getColumn()));
                }
            }
            cinemaModel.setAvailableSeats(newAvailableModel);
            return  cinemaModel;
        }

        // Out Of Bound Control
        public boolean isOutOfBounds(AvailableDto availableDto){
            return availableDto.getRow() > 9 || availableDto.getColumn() > 9 || availableDto.getRow() < 1 || availableDto.getColumn() < 1;
        }

        public ResponseEntity<Response> purchase(AvailableDto availableDto, CinemaModel cinemaModel){

            if(this.isOutOfBounds(availableDto)){
                return ResponseEntity.badRequest().body(new ResponseError("The number of a row or a column is out of bounds!"));
            }

            for (AvailableModel availableModel : cinemaModel.getAvailableSeats()){
                if(availableModel.getColumn() == availableDto.getColumn() && availableModel.getRow() == availableDto.getRow() && !availableModel.getReserved()){
                    availableModel.setReserved(true);
                    return ResponseEntity.ok(new ResponsePurchase(availableDto.getRow(),availableDto.getColumn(),availableModel.getPrice()));
                }
            }
            return ResponseEntity.badRequest().body(new ResponseError("The ticket has been already purchased!"));
        }
    }
  learner_created: true
- name: src/cinema/ResponsePurchase.java
  visible: true
  text: |
    package cinema;

    public class ResponsePurchase implements  Response{

        private int row;
        private int column;
        private int price;

        public ResponsePurchase(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/CinemaModel.java
  visible: true
  text: |
    package cinema;
    import java.util.ArrayList;
    import java.util.List;

    public class CinemaModel {

        private int totalRows;
        private int totalColumns;
        private List<AvailableModel> availableSeats;

        public CinemaModel() {
            this.availableSeats = new ArrayList<>();
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<AvailableModel> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(AvailableModel availableSeats) {
            this.availableSeats.add(availableSeats);
        }

        public void setAvailableSeats(List<AvailableModel> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/ResponseError.java
  visible: true
  text: |
    package cinema;

    public class ResponseError implements  Response{

        private String error;

        public ResponseError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/AvailableModel.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    public class AvailableModel {
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        private boolean reserved;

        public AvailableModel(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = 8;
            if (row <= 4){
                this.price = 10;
            }
            this.reserved = false;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public boolean getReserved() {
            return reserved;
        }

        public void setReserved(boolean reserve) {
            reserved = reserve;
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    @RequestMapping
    public class CinemaController {

        CinemaService cinemaService = new CinemaService();
        CinemaModel cinemaModel = cinemaService.initializeSeats();

        @GetMapping
        public ResponseEntity<String> index(){
            return  ResponseEntity.ok("Hello Cinema Task.");
        }

        @GetMapping("/seats")
        public ResponseEntity<CinemaModel> seats(){
            return ResponseEntity.ok(cinemaService.getSeats(cinemaModel));
        }

        @PostMapping("/purchase")
        public ResponseEntity<Response> purchase(@RequestBody AvailableDto availableDto){
            return cinemaService.purchase(availableDto, cinemaModel);
        }

    }
  learner_created: true
- name: src/cinema/Response.java
  visible: true
  text: |
    package cinema;

    public interface Response {
    }
  learner_created: true
- name: src/cinema/PurchaseRequestDto.java
  visible: true
  text: |
    package cinema;

    public class AvailableDto {

        private int row;
        private int column;

        public AvailableDto() {
        }

        public AvailableDto(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/ResponseReturn.java
  visible: true
  learner_created: true
- name: src/cinema/ReturnRequestDto.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/947/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 02 Nov 2021 09:25:29 UTC
record: 3
